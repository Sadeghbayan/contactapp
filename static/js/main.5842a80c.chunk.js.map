{"version":3,"sources":["Components/ContactItem/ContactItem.module.scss","store/actions/names.js","Config.js","store/reducers/contacts.js","store/reducers/rootReducer.js","store/sagas/contact.js","store/sagas/rootSaga.js","util.js","Components/ContactItem/ContactItem.js","Components/Contact/Contact.js","Components/Contact/Container/ContactsContainer.js","store/actions/contacts.js","serviceWorker.js","index.js","Components/Contact/Contact.module.scss"],"names":["module","exports","FETCH_CONTACTS","FETCH_CONTACTS_SUCCESS","FETCH_CONTACTS_FAILED","CONFIG","cantacts","state","action","type","loading","error","contacts","contactArray","users","data","results","tabs","map","item","filter","includes","name","last","charAt","toLowerCase","index","firstCharOfLastName","push","rootReducer","combineReducers","fetchContacts","contactSaga","fetchContactsRequest","axios","get","then","response","catch","call","requestResponse","put","message","takeLatest","rootSaga","all","makeStringtoUpperCase","str","toUpperCase","ContactItem","displayUserCard","e","id","stopPropagation","props","closeUserCard","this","showUserCard","isItemContentVisible","key","login","uuid","onClick","className","styles","listItemInner","autoHeight","fixedHeight","first","contactCard","closeIcon","photo","src","picture","medium","alt","information","fullname","email","phone","location","street","number","city","postcode","username","Component","TabPane","Tabs","Contact","setState","arr","secondColumnStart","Math","floor","length","listWrapper","listItem","slice","title","defaultActiveKey","i","tab","tabItem","class","tabItemChar","tabItemLength","disabled","renderSplit","ContactsContainer","connect","dispatch","contactsComponent","Boolean","window","hostname","match","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5842a80c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItemInner\":\"ContactItem_listItemInner__ztjyG\",\"fixedHeight\":\"ContactItem_fixedHeight__2g2PP\",\"autoHeight\":\"ContactItem_autoHeight__2OEVL\",\"contactCard\":\"ContactItem_contactCard__1oTsd\",\"information\":\"ContactItem_information__3hBfX\",\"fullname\":\"ContactItem_fullname__121Z7\",\"item\":\"ContactItem_item__3PV0R\",\"photo\":\"ContactItem_photo__1GAlE\",\"username\":\"ContactItem_username__mvCT4\",\"closeIcon\":\"ContactItem_closeIcon__20j1-\"};","// FETCH CONTACTS\nexport const FETCH_CONTACTS = 'FETCH_CONTACTS';\nexport const FETCH_CONTACTS_SUCCESS = 'FETCH_CONTACTS_SUCCESS';\nexport const FETCH_CONTACTS_FAILED = 'FETCH_CONTACTS_FAILED';\n\n\n\n","export const CONFIG = {\n    \"title\": \"Contact List\",\n    \"userUrl\": \"https://api.randomuser.me\",\n    \"numberCards\": 120,\n    \"tabs\": [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n}","import {\n    FETCH_CONTACTS,\n    FETCH_CONTACTS_SUCCESS,\n    FETCH_CONTACTS_FAILED\n} from '../actions/names';\nimport {CONFIG} from '../../Config'\n\n\n\nconst cantacts = (state = [], action) => {\n    switch (action.type) {\n        case FETCH_CONTACTS:\n            return {\n                ...state,\n                loading: true,\n                error: false\n            }\n        case FETCH_CONTACTS_SUCCESS:\n            // to create a array of element based on default CONFIG\n            let contacts = []\n            let contactArray = {};\n            const users = action.data.results;\n            var tabs = CONFIG.tabs\n            const contactList = tabs.map(item => {\n                return contactArray[item] = ''\n            })\n            const removeUnnecessaryList = users.filter(item => tabs.includes(item.name.last.charAt(0).toLowerCase()))\n                                                .map((item,index) => {\n                                                    const firstCharOfLastName = item.name.last.charAt(0).toLowerCase();\n                                                    if(contactArray[firstCharOfLastName]){\n                                                        contactArray[firstCharOfLastName].push(item)\n                                                    }else {\n                                                        contactArray[firstCharOfLastName] = [item]\n                                                    }\n                                                    return contactArray\n                                                })\n            contacts[\"tabs\"] = tabs\n            contacts[\"contactArray\"] = contactArray\n            return {\n                ...state,\n                contacts: contacts,\n                loading: false,\n                error: false\n            }\n        case FETCH_CONTACTS_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: true\n            }\n        default:\n            return state\n    }\n}\n\nexport default cantacts;\n","import { combineReducers } from 'redux';\nimport contacts from './contacts'\n\n\nconst rootReducer = combineReducers({\n    contacts: contacts,\n})\n\n\nexport default rootReducer;\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios'\nimport { CONFIG } from '../../Config'\nimport {\n    FETCH_CONTACTS,\n    FETCH_CONTACTS_SUCCESS,\n    FETCH_CONTACTS_FAILED\n} from '../actions/names'\n\nconst fetchContactsRequest = () => {\n    return axios\n        .get( `${CONFIG.userUrl}/?results=${CONFIG.numberCards}`)\n        .then(response => response)\n        .catch(error => ({ error }));\n}\n\n\nfunction* fetchContacts() {\n    try {\n        const requestResponse = yield call(fetchContactsRequest);\n        if (requestResponse.error != null) {\n            yield put({type: FETCH_CONTACTS_FAILED, message: requestResponse.error});\n        } else {\n            yield put({type: FETCH_CONTACTS_SUCCESS, data: requestResponse.data});\n        }\n    } catch (e) {\n        yield put({type: FETCH_CONTACTS_FAILED, message: e.message});\n    }\n}\n\nexport default function* contactSaga() {\n    yield takeLatest(FETCH_CONTACTS, fetchContacts);\n}\n\n","import { all } from 'redux-saga/effects';\nimport contactSaga from './contact'\n\nexport default function* rootSaga() {\n    yield all([\n        contactSaga(),\n    ]);\n}\n","\nexport function makeStringtoUpperCase(str) {\n    return str.toUpperCase()\n}","import React, {Component} from 'react';\nimport styles from \"./ContactItem.module.scss\";\nimport {Icon} from \"antd\";\nimport PropTypes from 'prop-types';\nimport {makeStringtoUpperCase} from '../../util'\n\n\nclass ContactItem extends Component {\n\n    displayUserCard = (e, id) => {\n        e.stopPropagation();\n        this.props.displayUserCard(id)\n    }\n\n    closeUserCard = (e) => {\n        e.stopPropagation();\n        this.props.closeUserCard()\n    }\n\n    render() {\n        const { item, showUserCard, isItemContentVisible } = this.props;\n        return (\n            <div>\n                <div\n                    key={item.login.uuid}\n                    onClick={(e) => this.displayUserCard(e, item.login.uuid)}\n                    className={`${styles.listItemInner} ${isItemContentVisible === item.login.uuid ? styles.autoHeight : styles.fixedHeight}`}\n                >\n                    <span>{item.name.last}, {makeStringtoUpperCase(item.name.first)}</span>\n\n                    {isItemContentVisible === item.login.uuid && showUserCard ?\n                        (\n                            <div className={styles.contactCard}>\n                                <span onClick={(e) => this.closeUserCard(e)}\n                                      className={styles.closeIcon}>\n                                    <Icon type=\"close\"/>\n                                </span>\n                                <div className={styles.photo}>\n                                    <img src={item.picture.medium} alt={`${item.name.first} ${item.name.last}`}/>\n                                </div>\n                                <div className={styles.information}>\n                                    <div className={styles.fullname}>{makeStringtoUpperCase(item.name.first)}, {item.name.last}</div>\n                                    <div className={styles.item}>\n                                        <label>e-mail</label>\n                                        <span>{item.email}</span>\n                                    </div>\n                                    <div className={styles.item}>\n                                        <label>phone</label>\n                                        <span>{item.phone}</span>\n                                    </div>\n                                    <div className={styles.item}>\n                                        <label>street</label>\n                                        <span>{item.location.street.number} {item.location.street.name}</span>\n                                    </div>\n                                    <div className={styles.item}>\n                                        <label>city</label>\n                                        <span>{item.location.city}</span>\n                                    </div>\n                                    <div className={styles.item}>\n                                        <label>state</label>\n                                        <span>{item.location.state}</span>\n                                    </div>\n                                    <div className={styles.item}>\n                                        <label>postcode</label>\n                                        <span>{item.location.postcode}</span>\n                                    </div>\n                                </div>\n                                <div className={styles.username}>\n                                    <label>\n                                        username\n\n                                    </label>\n                                    {item.login.username}\n                                </div>\n                            </div>\n                        )\n                        : null\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\nContactItem.propTypes = {\n    item: PropTypes.object.isRequired,\n    isItemContentVisible: PropTypes.string.isRequired,\n    closeUserCard: PropTypes.func.isRequired,\n    displayUserCard: PropTypes.func.isRequired,\n};\nexport default ContactItem;","import React, {Component} from 'react';\nimport { Tabs, Spin } from 'antd';\nimport styles from './Contact.module.scss'\nimport ContactItem from '../ContactItem/ContactItem'\nimport {CONFIG} from '../../Config'\nconst { TabPane } = Tabs;\n\n\n\nclass Contact extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isItemContentVisible: \"\",\n            showUserCard:false\n        }\n    }\n    componentDidMount() {\n        this.props.fetchContactsRequest()\n    }\n\n    displayUserCard = (id) => {\n        this.setState({\n            isItemContentVisible: id,\n            showUserCard: !this.state.showUserCard ? true : true\n        });\n    }\n\n    closeUserCard = () => {\n        this.setState({\n            isItemContentVisible: null,\n            showUserCard: this.state.showUserCard? false : false\n        })\n\n    }\n\n    renderSplit(arr) {\n\n        const secondColumnStart = Math.floor(arr.length / 2);\n        return (\n            <ul className={styles.listWrapper}>\n                <li className={styles.listItem}>\n                    {arr.slice(0,secondColumnStart).map(item => (\n                            <ContactItem\n                                item={item}\n                                showUserCard={this.state.showUserCard}\n                                isItemContentVisible={this.state.isItemContentVisible}\n                                key={item.login.uuid}\n                                displayUserCard={this.displayUserCard}\n                                closeUserCard={this.closeUserCard}\n                            />\n                        )\n                    )}\n\n\n\n                </li>\n                <li className={styles.listItem}>\n                    {arr.slice(secondColumnStart).map(item =>(\n                        <ContactItem\n                            item={item}\n                            showUserCard={this.state.showUserCard}\n                            isItemContentVisible={this.state.isItemContentVisible}\n                            key={item.login.uuid}\n                            displayUserCard={this.displayUserCard}\n                            closeUserCard={this.closeUserCard}\n                        />\n                    ))}\n                </li>\n            </ul>\n        );\n    }\n\n\n    render() {\n        return (\n            <div className=\"container margin--top\">\n\n                <h4 className={styles.title}>\n                    {CONFIG.title}\n                </h4>\n\n                {\n                    this.props.contacts.contacts ? (\n                        <Tabs type=\"card\" defaultActiveKey=\"1\">\n                            {this.props.contacts.contacts.tabs.map(i => (\n                                <TabPane tab={\n                                    <div className={styles.tabItem}>\n                                          <span class={styles.tabItemChar}>{i}</span> <span className={styles.tabItemLength}> {this.props.contacts.contacts.contactArray[i].length}</span>\n                                    </div>\n                                     } disabled={this.props.contacts.contacts.contactArray[i].length === 0} key={i}>\n\n                                    {this.props.contacts.contacts.contactArray[i].length > 0 ?(\n                                        <div>\n                                            {this.renderSplit(this.props.contacts.contacts.contactArray[i])}\n                                        </div>\n                                    ) : null}\n                                </TabPane>\n                            ))}\n                        </Tabs>\n                    ) : (\n                        <div className=\"text-center\">\n                            <Spin/> Loading ...\n                        </div>\n                    )\n                }\n\n\n\n            </div>\n        );\n    }\n}\n\nexport default Contact;","import { connect } from 'react-redux';\nimport contactsComponent from '../Contact'\nimport { fetchContactsRequest } from '../../../store/actions/contacts'\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchContactsRequest:() => dispatch(fetchContactsRequest()),\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        contacts : state.contacts,\n    }\n}\n\nconst ContactsContainer = connect(mapStateToProps, mapDispatchToProps)(contactsComponent)\nexport default ContactsContainer;\n","import {\n    FETCH_CONTACTS,\n} from './names'\n\n\nexport function fetchContactsRequest() {\n    return {\n        type: FETCH_CONTACTS,\n    }\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './store/reducers/rootReducer';\nimport rootSaga from './store/sagas/rootSaga';\nimport \"antd/dist/antd.css\";\nimport '../src/scss/style.scss';\nimport ContactsContainer from './Components/Contact/Container/ContactsContainer';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(sagaMiddleware),\n);\nsagaMiddleware.run(rootSaga)\n\nReactDOM.render(\n    <Provider store={store}>\n        <ContactsContainer />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Contact_title__19XUb\",\"listWrapper\":\"Contact_listWrapper__2j_om\",\"listItem\":\"Contact_listItem__3qiAy\",\"tabItem\":\"Contact_tabItem__2w3Hz\",\"tabItemChar\":\"Contact_tabItemChar__1zlY5\",\"tabItemLength\":\"Contact_tabItemLength__3Hz2q\"};"],"sourceRoot":""}